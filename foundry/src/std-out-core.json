{
    "language": "Solidity",
    "sources": {
        "PPP.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts@4.9.2/token/ERC20/ERC20.sol\";\n\n/*\n * PeerPushProtocol.sol\n * Peer Push Protocol (PPP) is a protocol for incentivizing the pushing of data\n * into an aggregator contract which can then be easily used on or off-chain.\n */\ncontract PeerPushProtocol is ERC20 {\n    uint256 public constant INITIAL_SUPPLY = 10000000000 ether;\n\n    constructor() ERC20(\"PeerPushProtocol\", \"PPP\") {\n        // Mint the total supply to the contract itself\n        _mint(address(this), INITIAL_SUPPLY);\n    }\n\n    mapping(address => bool) public hasClaimedTokens;\n    mapping(address => uint256) public addressToDepositedTokens;\n    mapping(address => uint256[]) public addressToPushRequestIds;\n\n    struct PushRequest {\n        uint256 id;\n        address creator;\n        address contractAddress;\n        string functionName;\n        bytes currentState;\n        uint256 pushReward;\n        uint256 lastUpdate;\n        uint256 updateInterval;\n        bool active;\n    }\n\n    PushRequest[] public pushRequests;\n\n    event TokensClaimed(address indexed claimant, uint256 amount);\n    event TokensDeposited(address indexed depositor, uint256 amount);\n    event TokensWithdrawn(address indexed withdrawer, uint256 amount);\n    event PushRequestCreated(\n        uint256 indexed requestId,\n        address indexed creator,\n        uint256 pushReward,\n        uint256 updateInterval\n    );\n    event PushRequestFulfilled(\n        uint256 indexed requestId,\n        address indexed fulfiller\n    );\n    event PushRequestEnabled(\n        uint256 indexed requestId,\n        address indexed enabler\n    );\n    event PushRequestDisabled(\n        uint256 indexed requestId,\n        address indexed disabler\n    );\n\n    /* claim tokens if you have not already */\n    function claimTokens() public {\n        require(!hasClaimedTokens[msg.sender], \"already claimed tokens\");\n\n        uint256 claimAmount = 10000 ether;\n        require(\n            balanceOf(address(this)) >= claimAmount,\n            \"Insufficient contract balance\"\n        );\n\n        // mark the sender as having claimed tokens\n        hasClaimedTokens[msg.sender] = true;\n\n        // Transfer tokens to the sender from the contract\n        _transfer(address(this), msg.sender, claimAmount);\n\n        emit TokensClaimed(msg.sender, claimAmount); // Emit event when tokens are claimed\n    }\n\n    /* deposit PPP tokens into the contract\n     * @param amount the amount of PPP tokens to deposit\n     */\n    function depositTokens(uint256 amount) public {\n        // Check the balance\n        require(\n            balanceOf(msg.sender) >= amount,\n            \"Insufficient balance to deposit\"\n        );\n\n        // Transfer the tokens from the sender to the contract\n        require(\n            this.transferFrom(msg.sender, address(this), amount),\n            \"Transfer failed\"\n        );\n\n        // Update the deposited balance\n        addressToDepositedTokens[msg.sender] += amount;\n\n        emit TokensDeposited(msg.sender, amount); // Emit event when tokens are deposited\n    }\n\n    /* withdraw PPP tokens from the contract\n     * @param amount the amount of PPP tokens to withdraw\n     */\n    function withdrawTokens(uint256 amount) public {\n        require(\n            addressToDepositedTokens[msg.sender] >= amount,\n            \"Insufficient balance\"\n        );\n\n        addressToDepositedTokens[msg.sender] -= amount;\n\n        _transfer(address(this), msg.sender, amount);\n\n        emit TokensWithdrawn(msg.sender, amount); // Emit event when tokens are withdrawn\n    }\n\n    /* create a new PushRequest\n     * @param _contractAddress the address of the contract to call\n     * @param _functionName the name of the function to call i.e \"getPrice\"\n     * @param _pushReward the amount of PPP to send to the fulfiller when the pushRequest is updateed\n     * @param _updateInterval the amount of time in seconds between updatees\n     */\n    function createPushRequest(\n        address _contractAddress,\n        string memory _functionName,\n        uint256 _pushReward,\n        uint256 _updateInterval\n    ) public {\n        // Check if the PushRequest creator has enough deposited tokens for the reward\n        require(\n            addressToDepositedTokens[msg.sender] >= _pushReward,\n            \"Insufficient depositedToken balance to reward\"\n        );\n\n        // call the function to get the initial state\n        bytes memory returnData = readContract(_contractAddress, _functionName);\n\n        PushRequest memory pushRequest = PushRequest({\n            id: pushRequests.length,\n            creator: msg.sender,\n            contractAddress: _contractAddress,\n            functionName: _functionName,\n            currentState: returnData,\n            pushReward: _pushReward,\n            lastUpdate: block.timestamp,\n            updateInterval: _updateInterval,\n            active: true\n        });\n\n        // add the pushRequest to the list of pushRequests\n        pushRequests.push(pushRequest);\n\n        // add the pushRequest to the list of pushRequests for the sender\n        addressToPushRequestIds[msg.sender].push(pushRequest.id);\n\n        emit PushRequestCreated(\n            pushRequest.id,\n            msg.sender,\n            _pushReward,\n            _updateInterval\n        ); // Emit event when a push request is created\n    }\n\n    /* disable a pushRequest\n     * @param _pushRequestId the id of the pushRequest to cancel\n     */\n    function disablePushRequest(uint256 _pushRequestId) public {\n        PushRequest storage pushRequest = pushRequests[_pushRequestId];\n\n        // check that the pushRequest is active\n        require(pushRequest.active, \"pushRequest is inactive\");\n\n        // check that msg.sender is the owner of the pushRequest\n        require(pushRequest.creator == msg.sender, \"You are not the owner\");\n\n        // disable the pushRequest\n        pushRequest.active = false;\n\n        emit PushRequestDisabled(_pushRequestId, msg.sender); // Emit event when a push request is disabled\n    }\n\n    /* enable a pushRequest\n     * @param _pushRequestId the id of the pushRequest to enable\n     */\n    function enablePushRequest(uint256 _pushRequestId) public {\n        PushRequest storage pushRequest = pushRequests[_pushRequestId];\n\n        // check that the pushRequest is inactive\n        require(!pushRequest.active, \"pushRequest is active\");\n\n        // check that the sender is the owner of the pushRequest\n        require(pushRequest.creator == msg.sender, \"sender is not the owner\");\n\n        // enable the pushRequest\n        pushRequest.active = true;\n\n        emit PushRequestEnabled(_pushRequestId, msg.sender); // Emit event when a push request is enabled\n    }\n\n    /* update the state of a pushRequest\n     * @param _pushRequestId the id of the pushRequest to update\n     */\n    function fulfilPushRequest(uint256 _pushRequestId) public {\n        PushRequest storage pushRequest = pushRequests[_pushRequestId];\n\n        // check that the PushRequest is active\n        require(pushRequest.active, \"PushRequest is inactive\");\n\n        // check that the update interval has passed\n        require(\n            block.timestamp - pushRequest.lastUpdate >=\n                pushRequest.updateInterval,\n            \"update interval has not passed\"\n        );\n\n        // Check if the PushRequest creator has enough deposited tokens for the reward\n        require(\n            addressToDepositedTokens[pushRequest.creator] >=\n                pushRequest.pushReward,\n            \"Insufficient balance to reward\"\n        );\n\n        // call the function to get the updated state\n        bytes memory returnData = readContract(\n            pushRequest.contractAddress,\n            pushRequest.functionName\n        );\n\n        // check that the state has actually updated\n        require(\n            keccak256(returnData) != keccak256(pushRequest.currentState),\n            \"state has not changed\"\n        );\n\n        // update the pushRequest\n        pushRequest.currentState = returnData;\n        pushRequest.lastUpdate = block.timestamp;\n\n        // Deduct the reward from the pushRequest creator's deposited balance\n        addressToDepositedTokens[pushRequest.creator] -= pushRequest.pushReward;\n\n        // add the reward to msg.sender's deposited balance\n        addressToDepositedTokens[msg.sender] += pushRequest.pushReward;\n\n        emit PushRequestFulfilled(_pushRequestId, msg.sender); // Emit event when a push request is fulfilled\n    }\n\n    /* get the current state of a pushRequest\n     * @param _pushRequestId the id of the pushRequest to get the state of\n     */\n    function getPushRequestState(\n        uint256 _pushRequestId\n    ) public view returns (bytes memory) {\n        PushRequest storage pushRequest = pushRequests[_pushRequestId];\n\n        return pushRequest.currentState;\n    }\n\n    /* get all pushRequests\n     */\n    function getPushRequests() public view returns (PushRequest[] memory) {\n        return pushRequests;\n    }\n\n    /* read the current state of a function on another contract\n     * @param _contractAddress the address of the contract to call\n     * @param _functionName the name of the function to call\n     */\n    function readContract(\n        address _contractAddress,\n        string memory _functionName\n    ) internal returns (bytes memory) {\n        // call the function to get the initial state\n        (bool success, bytes memory returnData) = _contractAddress.call(\n            abi.encodeWithSignature(string.concat(_functionName, \"()\"))\n        );\n\n        require(success, \"call failed\");\n\n        return returnData;\n    }\n}\n"
        },
        "@openzeppelin/contracts@4.9.2/token/ERC20/ERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
        },
        "@openzeppelin/contracts@4.9.2/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
        },
        "@openzeppelin/contracts@4.9.2/token/ERC20/extensions/IERC20Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
        },
        "@openzeppelin/contracts@4.9.2/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "": [
                    "ast"
                ],
                "*": [
                    "abi",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.legacyAssembly",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "evm.gasEstimates",
                    "evm.assembly"
                ]
            }
        }
    }
}